north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
newLevels <- str_replace(currentLevels,
north_regex, "北部")
newLevels <- str_replace(currentLevels,
middle_regex, "中部")
newLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
newLevels <- str_replace(currentLevels,
north_regex, "北部")
newLevels <- str_replace(currentLevels,
middle_regex, "中部")
newLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
newLevels
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
newLevels <- str_replace(currentLevels,
north_regex, "北部")
newLevels <- str_replace(currentLevels,
middle_regex, "中部")
newLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
newLevels
library(stringr)
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
newLevels <- str_replace(currentLevels,
north_regex, "北部")
newLevels <- str_replace(currentLevels,
middle_regex, "中部")
newLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
newLevels
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
currentLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
newLevels
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
currentLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
newLevels
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
currentLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- currentLevels
covid19$地區
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
install.packages("forcats")
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
a=covid19$性別
a=str_replace(a,"男","Male")
a=str_replace(a,"女","Female")
a
a=factor(covid19$性別)
a=str_replace(a,"男","Male")
a=str_replace(a,"女","Female")
covid19$性別=a
levels(covid19$性別)=levels(a)
a=factor(covid19$性別)
a=str_replace(a,"男","Male")
a=str_replace(a,"女","Female")
covid19$性別=a
levels(covid19$性別)=levels(a)
covid19$性別
a=factor(covid19$性別)
a=str_replace(a,"男","Male")
a=str_replace(a,"女","Female")
covid19$性別=a
levels(covid19$性別)=levels(a)
covid19$性別
levels(covid19$性別)
covid19$性別=factor(covid19$性別)
a=factor(covid19$性別)
a=str_replace(a,"男","Male")
a=str_replace(a,"女","Female")
covid19$性別=a
levels(covid19$性別)=levels(a)
covid19$性別
levels(covid19$性別)
covid19$性別=factor(covid19$性別)
a=factor(covid19$性別)
a=str_replace(a,"男","Male")
a=str_replace(a,"女","Female")
covid19$性別=a
levels(covid19$性別)=levels(a)
factor(covid19$性別)
levels(covid19$性別)
covid19$性別=factor(covid19$性別)
a=covid19$性別
a=str_replace(a,"男","Male")
a=str_replace(a,"女","Female")
covid19$性別=a
levels(covid19$性別)=levels(a)
covid19$性別=factor(covid19$性別)
levels(covid19$性別)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
View(garbageRoutes)
a="[:graph:]+路線"
b=str_extract_all(garbageRoutes$linename,a)
b
a="[:graph:]+路線"
b=factor(str_extract_all(garbageRoutes$linename,a))
garbageRoutes$route=b
a="[:graph:]+路線"
b=factor(str_extract(garbageRoutes$linename,a))
garbageRoutes$route=b
a="[:graph:]+路線"
b=factor(str_extract(garbageRoutes$linename,a))
b
garbageRoutes$route=b
a="[:graph:]+路線"
b=factor(str_extract(garbageRoutes$linename,a))
table(b)
garbageRoutes$route=b
a="[:graph:]+路線"
b=factor(str_extract(garbageRoutes$linename,a))
table(b)
garbageRoutes$route=b
c=names(sort(table(b),decreasing = T))
c
a="[:graph:]+路線"
b=factor(str_extract(garbageRoutes$linename,a))
table(b)
garbageRoutes$route=b
c=names(sort(table(b),decreasing = T))
levels(garbageRoutes$route)=c
levels(garbageRoutes$route)
d="(?<=路線)[:graph:]+"
e=factor(str_extract(garbageRoutes$linename,d))
e
d="(?<=路線)[:graph:]+"
e=factor(str_extract(garbageRoutes$linename,d))
e=str_replace(e,NA,"全天")
e
d="(?<=路線)[:graph:]+"
e=factor(str_extract(garbageRoutes$linename,d))
e=str_replace(e,<NA>,"全天")
e
d="(?<=路線)[:graph:]+"
e=factor(str_extract(garbageRoutes$linename,d))
e=str_replace(e,NA,"全天")
e
d="(?<=路線)[:graph:]+"
e=factor(str_extract(garbageRoutes$linename,d))
e=str_replace(e,NA,"全天")
e[[217]]
d="(?<=路線)[:graph:]+"
e=factor(str_extract(garbageRoutes$linename,d))
e=str_replace(e,"<NA>","全天")
e[[217]]
d="(?<=路線)[:graph:]+"
e=factor(str_extract(garbageRoutes$linename,d))
e=str_replace(e,"<NA>","全天")
e
d="(?<=路線)[:graph:]+"
e=factor(str_extract(garbageRoutes$linename,d))
e=factor(str_replace(e,"<NA>","全天"))
e
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
e=factor(str_replace(e,NA,"全天"))
e
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
e=factor(str_replace(e,NA,"全天"))
e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
e=str_replace(e,NA,"全天")
e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
for (i in [1:1000]) {
if(e[[i]]==NA){
e[[i]]="全天"
}
}
e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
for (i in c(1:1000)) {
if(e[[i]]==NA){
e[[i]]="全天"
}
}
e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
for (i in c(1:1000)) {
if(e[[i]]==""){
e[[i]]="全天"
}
}
e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
for (i in c(1:1000)) {
if(e[[i]]==""){
e[[i]]="全天"
}
}
e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
#for (i in c(1:2000)) {
#  if(e[[i]]==""){
#    e[[i]]="全天"
#  }
#}
e[[1]]
e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
for (i in c(1:2000)) {
if(e[[i]]=="下午"){
print(T)
}
}
e[[1]]
e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
is.na(e)
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
e
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time=str_replace(garbageRoutes$time,"下午(1.4版)","下午")
garbageRoutes$time
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time=factor(str_replace(garbageRoutes$time,"下午(1.4版)","下午"))
garbageRoutes$time
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time=factor(str_replace(garbageRoutes$time,"下午(1.4版)","下午"))
levels(garbageRoutes$time)=c("(一、四)下午","下午","下午","全天","晚上")
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time=factor(str_replace(garbageRoutes$time,"下午(1.4版)","下午"))
levels(garbageRoutes$time)=c("(一、四)下午","下午","下午","全天","晚上")
levels(garbageRoutes$time)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
map(dance, ~.x$title) ->
list_titles
View(list_titles)
View(dance)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
list_showTimes_dance4
map(dance[[8]]$showInfo, ~ .x$time)
map(dance[[8]]$showInfo, ~ .x$location)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/67BB3C2B-E7D1-43A7-B872-61B2F082E11B?$format=json", simplifyDataFrame = F) ->
busRoutes
View(busRoutes)
map(busRoutes,~.x$id)
map(busRoutes,~.x$providerId)
map(busRoutes,~.x$providerName)
map(busRoutes,~.x$nameZh)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
install.packages("curl")
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/67BB3C2B-E7D1-43A7-B872-61B2F082E11B?$format=json", simplifyDataFrame = F) ->
busRoutes
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$elementName
weather_next36hours$cwbopendata$dataset$location$locationName
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$elementName )
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$elementName )
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x[[1]]$time$startTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$endTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,max(~.x$time[[1]]$parameter$parameterValue))
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$endTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~max(.x$time[[1]]$parameter$parameterValue))
