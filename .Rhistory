f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
e
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time=str_replace(garbageRoutes$time,"下午(1.4版)","下午")
garbageRoutes$time
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time=factor(str_replace(garbageRoutes$time,"下午(1.4版)","下午"))
garbageRoutes$time
#e[[1]]
#e=factor(e)
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time=factor(str_replace(garbageRoutes$time,"下午(1.4版)","下午"))
levels(garbageRoutes$time)=c("(一、四)下午","下午","下午","全天","晚上")
d="(?<=路線)[:graph:]+"
e=str_extract(garbageRoutes$linename,d)
f=is.na(e)
for (i in c(1:2000)) {
if(f[[i]]==TRUE){
e[[i]]="全天"
}
}
e=factor(e)
garbageRoutes$time=e
garbageRoutes$time=factor(str_replace(garbageRoutes$time,"下午(1.4版)","下午"))
levels(garbageRoutes$time)=c("(一、四)下午","下午","下午","全天","晚上")
levels(garbageRoutes$time)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
map(dance, ~.x$title) ->
list_titles
View(list_titles)
View(dance)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
list_showTimes_dance4
map(dance[[8]]$showInfo, ~ .x$time)
map(dance[[8]]$showInfo, ~ .x$location)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/67BB3C2B-E7D1-43A7-B872-61B2F082E11B?$format=json", simplifyDataFrame = F) ->
busRoutes
View(busRoutes)
map(busRoutes,~.x$id)
map(busRoutes,~.x$providerId)
map(busRoutes,~.x$providerName)
map(busRoutes,~.x$nameZh)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
install.packages("curl")
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/67BB3C2B-E7D1-43A7-B872-61B2F082E11B?$format=json", simplifyDataFrame = F) ->
busRoutes
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$elementName
weather_next36hours$cwbopendata$dataset$location$locationName
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$elementName )
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$elementName )
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x[[1]]$time$startTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$endTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,max(~.x$time[[1]]$parameter$parameterValue))
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$endTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~max(.x$time[[1]]$parameter$parameterValue))
install.packages("magrittr")
library(magrittr)
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
region <- cities
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
library(magrittr)
library(stringr)
region <- cities
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
region <- cities
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
levels(region)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] %>%
sort(., decreasing=T)%>%
.
names(population)%>%
.
covid19$縣市 <-
factor(
covid19$縣市, levels=.
)
levels(covid19$縣市)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] %>%
sort(., decreasing=T)%>%
names(population)%>%
covid19$縣市 <-
factor(
covid19$縣市, levels=.
)
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] %>%
sort(., decreasing=T)%>%
names(.)%>%
covid19$縣市 <-
factor(
covid19$縣市, levels=.
)
levels(covid19$縣市)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] %>%
sort(., decreasing=T)%>%
names(.)%>%
covid19$縣市 <-
factor(
covid19$縣市, levels=.
)
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] %>%
population <- sort(population, decreasing=T)
population
names(population)%>%
covid19$縣市 <-
factor(
covid19$縣市, levels=.
)
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
covid19$縣市 <-
factor(
covid19$縣市, levels=.)
levels(covid19$縣市)
population %>%
{names(sort(.))} %>%
factor(cities, levels=.) -> cities
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population) %>%
covid19$縣市 <-
factor(
covid19$縣市, levels=.)
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels)
levels(covid19$縣市)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population) %>%
covid19$縣市 <-
factor(
covid19$縣市, levels= .)
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population) %>%
names(.)
covid19$縣市 <-
factor(
covid19$縣市, levels= .)
levels(covid19$縣市)
population %>%
sort() %>%
names() %>%
factor(cities, levels=.) -> cities
names(population)
names(population)%>%
names()
names(population)%>%
str()
covid19$縣市 <-
factor(covid19$縣市, levels= )
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
str()
covid19$縣市 <-
factor(covid19$縣市, levels= )
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
str()
covid19$縣市 <-
factor(covid19$縣市, levels=.)
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
str(.)
covid19$縣市 <-
factor(covid19$縣市, levels=.)
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
str(.)
factor(covid19$縣市, levels=.)->covid19$縣市
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
factor(covid19$縣市, levels=.)->covid19$縣市
levels(covid19$縣市)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
covid19$縣市 =
factor(covid19$縣市, levels=.)
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
covid19$縣市 =  factor(covid19$縣市, levels=.)
levels(covid19$縣市)
install.packages(c("backports", "bookdown", "ellipsis", "glue", "scales", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun"))
population %>%
{names(sort(.))} %>%
cities=
factor(cities, levels=.)
population %>%
{names(sort(.))} %>%
cities=
name()
#factor(cities, levels=.)
population %>%
{names(sort(.))} %>%
cities=
names()
#factor(cities, levels=.)
population %>%
{names(sort(.))} %>%
names()
#factor(cities, levels=.)
library(magrittr)
library(stringr)
population %>%
{names(sort(.))} %>%
cities=
names()
#factor(cities, levels=.)
population %>%
{names(sort(.))} %>%
names()
#factor(cities, levels=.)
population %>%
{names(sort(.))} %>%
factor(cities, levels=.)
population %>%
{names(sort(.))} %>%
cities=
factor(cities, levels=.)
population %>%
{names(sort(.))} %>%
factor(cities, levels=.)  ->cities
install.packages("magrittr")
library(magrittr)
library(stringr)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
covid19$縣市=
factor(covid19$縣市, levels=.)
levels(covid19$縣市)
covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
factor(covid19$縣市, levels=.)->covid19$縣市
levels(covid19$縣市)
remove.packages(magrittr)
install.packages("magrittr")
install.packages("magrittr")
remove.packages("magrittr")
library(magrittr)
library(stringr)
install.packages("magrittr")
install.packages("devtools")
install.packages("codetools")
install.packages("codetools")
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
return(q_d)
}
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
environment(demand)
environment(myDemand)
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
View(busArrivalForecast)
View(busRoutes)
View(busStopsInfo)
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
View(busArrivalForecast)
View(busRoutes)
View(busStopsInfo)
